#!/bin/bash

#set | sort
#set -x
set +e

PROFILES_AND_ACCOUNTS=${PROFILES_AND_ACCOUNTS:-$(cat cicd/rc/profiles_and_accounts.txt 2>/dev/null)}


function aws_check_environment_secrets() {
    #set -x

    export AWS_ACCESS_KEY_ID=${CI_AWS_ACCESS_KEY_ID:-$AWS_ACCESS_KEY_ID}
    export AWS_SECRET_ACCESS_KEY=${CI_AWS_SECRET_ACCESS_KEY:-$AWS_SECRET_ACCESS_KEY}
    export AWS_SESSION_TOKEN=${CI_AWS_SESSION_TOKEN:-$AWS_SESSION_TOKEN}
    # This one may or may not fail ...
    aws sts get-caller-identity 2>&1 || true

    [ -z "$AWS_ACCESS_KEY_ID" -o -z "$AWS_SECRET_ACCESS_KEY" ] && { echo "AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY is not set"; exit 1; }
}

function aws_configure_profile() {
    export nounset=$(
      shopt                 -o nounset > /dev/null
      echo $?
    )                                                      || true
    [ 1 -eq $nounset ] || { set +o nounset; }

    [ ! -z "$AWS_PROFILE" ] || { echo "No AWS_PROFILE given!";  return 1; }
    [ ! -z "$AWS_ACCESS_KEY_ID" ] || { echo "No AWS_ACCESS_KEY_ID given!"; return 2; }
    [ ! -z "$AWS_SECRET_ACCESS_KEY" ] || { echo "No AWS_SECRET_ACCESS_KEY given!"; return 3; }
    UNSET_AWS_ACCOUNT_TOOLS=0
    [ ! -z "$AWS_ACCOUNT_TOOLS" ] || { echo "No AWS_ACCOUNT_TOOLS given! Using default ..."; AWS_ACCOUNT_TOOLS="433714148419"; UNSET_AWS_ACCOUNT_TOOLS=1; }
    UNSET_AWS_ACCOUNT_ID=0
    [ ! -z "$AWS_ACCOUNT_ID" ] || { echo "No AWS_ACCOUNT_ID given! Using default ..."; AWS_ACCOUNT_ID=$AWS_ACCOUNT_TOOLS; UNSET_AWS_ACCOUNT_ID=1; }
    UNSET_AWS_REGION_TOOLS=0
    [ ! -z "$AWS_REGION_TOOLS" ] || { echo "No AWS_REGION_TOOLS given! Using default ..."; AWS_REGION_TOOLS="us-east-2"; UNSET_AWS_REGION_TOOLS=1; }
    UNSET_AWS_ROLE_ARN=0
    [ ! -z "$AWS_ROLE_ARN" ] || { echo "No AWS_ROLE_ARN given! Using default ..."; AWS_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/github-terraform-pipelines"; UNSET_AWS_ROLE_ARN=1; }
    echo "Create AWS_PROFILE=$AWS_PROFILE in ~/.aws/config"
    #set -x
    export PAGER=''
    aws --version

	  [ -z "$PROFILES_ALWAYS_CREATE" -a ! -z "$(aws configure list-profiles | egrep -e "^$AWS_PROFILE$" 2>/dev/null)" ] || {
			source_profile=${1:-$AWS_SOURCE_PROFILE}
			aws configure set output json --profile=$AWS_PROFILE 2>&1
			aws configure set region ${AWS_DEFAULT_REGION:-us-east-2} --profile=$AWS_PROFILE 2>&1
			if [ ! -z "$source_profile" ] ; then
					aws configure set role_arn $AWS_ROLE_ARN --profile=$AWS_PROFILE 2>&1
					aws configure set source_profile $source_profile --profile=$AWS_PROFILE 2>&1
			else
					aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile=$AWS_PROFILE 2>&1
					aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile=$AWS_PROFILE 2>&1
					test -z "${AWS_SESSION_TOKEN}" || aws configure set aws_session_token ${AWS_SESSION_TOKEN} --profile=$AWS_PROFILE 2>&1
			fi
		}
    aws sts get-caller-identity --profile=$AWS_PROFILE 2>&1
    #set +x
    [ 0 -eq $UNSET_AWS_ACCOUNT_TOOLS ] || unset AWS_ACCOUNT_TOOLS
    [ 0 -eq $UNSET_AWS_ACCOUNT_ID ] || unset AWS_ACCOUNT_ID
    [ 0 -eq $UNSET_AWS_REGION_TOOLS ] || unset AWS_REGION_TOOLS
    [ 0 -eq $UNSET_AWS_ROLE_ARN ] || unset AWS_ROLE_ARN

    [ 1 -eq $nounset ] || { set -o nounset; }
    return $?
}

function aws_check_profiles_and_accounts() {
    profiles_and_accounts="$1"

    set +e

    [ -z "$profiles_and_accounts" ] || for profile in $profiles_and_accounts ; do
      export AWS_PROFILE=$(echo $profile | cut -d : -f 1)
      export AWS_ACCOUNT_ID=$(echo $profile | cut -d : -f 2)
      aws_configure_profile b2b-master
      RC=$?
      [ 0 -eq $RC ] || { echo "Failed to set up profile $AWS_PROFILE:$AWS_ACCOUNT_ID"; exit $RC; }
      unset AWS_PROFILE
      unset AWS_ACCOUNT_ID
    done || true

    echo "Profiles:"
    aws configure list-profiles 2>&1 || { set; exit $?; }
    echo ""

    echo "~/.aws/config"
    cat ~/.aws/config
    echo ""
}

function aws_configure_profiles_and_accounts() {
    profiles_and_accounts="${1:-$PROFILES_AND_ACCOUNTS}"

    set +e
    echo "Accounts and Profiles: $profiles_and_accounts"
    export AWS_SOURCE_PROFILE=b2b-master

    for account_profile in ${profiles_and_accounts} ; do
      [ ! -z "$account_profile" ] || continue
      export AWS_PROFILE=$(echo $account_profile | cut -d: -f 1)
      export AWS_ACCOUNT_ID=$(echo $account_profile | cut -d: -f 2)
      aws_configure_profile $AWS_SOURCE_PROFILE
      RC=$?
      [ 0 -eq $RC ] || { echo "Failed to set up profile $AWS_PROFILE:$AWS_ACCOUNT_ID"; exit $RC; }
      unset AWS_PROFILE
      unset AWS_ACCOUNT_ID
    done
    unset AWS_SOURCE_PROFILE
}

function aws_configure_base_profiles() {
    set +e
    export AWS_PROFILE=default
    export AWS_ACCOUNT_ID=${AWS_ACCOUNT_TOOLS:-$AWS_ACCOUNT_ID}
    unset AWS_SOURCE_PROFILE
    aws_configure_profile
    RC=$?
    [ 0 -eq $RC ] || { echo "Failed to set up profile default"; exit $RC; }

    export AWS_PROFILE=b2b-master
    export AWS_ACCOUNT_ID=048648088468
    aws_configure_profile
    RC=$?
    unset AWS_PROFILE
    unset AWS_ACCOUNT_ID
    [ 0 -eq $RC ] || { echo "Failed to set up profile b2b-master"; exit $RC; }
}
